---
import Layout from "@layouts/Layout.astro";
import PageHeader from "@components/profile/PageHeader.astro";
import Input from "@components/ui/Input.astro";
import { Countries } from "src/utils/countries"; 
import Button from "@components/ui/Button.astro";
import { User } from "src/utils/getUser";
import { Accounts } from "@pages/api/accounts/getUserAccount";

const countries =  Countries
const southAfrica = countries.find((country) => country.name === "South Africa");

const { cookies } = Astro;
const activeUser = User;
const userAccount = Accounts.filter(acc => acc.userId === activeUser?.id);

const [user] = userAccount;
const { id } = Astro.params;

if(!activeUser)
{
	cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });
  Astro.redirect('/Signin')
};
---
<Layout title="JobBoard | Contact info">
    <div class="max-w-[40rem] px-4 py-10 lg:pt-20 sm:px-6 lg:px-8 lg:py-14 mx-auto mt-10 dark:text-white">
        <PageHeader title="Contact information" subtitle="" href="/Profile" />

        <div class="mt-10">
            <form method="post" action={`/api/accounts/${id}`}>

                <Input type="text" id="name" name="name" value={ user?.name && user?.name } />
                <br>
                <Input type="text" id="surname" name="surname" value={ user?.surname && user?.surname } />
                <br>
                <Input type="text" id="headline" name="headline" value={ user.headline && user?.headline } />
                <br>          
                <div class="relative">
                    <input type="number" id="number" name="number" class="py-3 px-4 ps-4 pe-20 block w-full border-gray-200 focus:ring-sky-600 rounded-lg text-sm focus:z-10 focus:border-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:focus:ring-sky-600" placeholder="" value={user?.number && user?.number}>
                    <div class="absolute inset-y-0 end-0 flex items-center text-gray-500 pe-px border-l dark:border-gray-700">
                    <label for="hs-inline-leading-select-number" class="sr-only">number</label>
                    <select id="hs-inline-leading-select-number" name="hs-inline-leading-select-number" class="block w-full border-transparent rounded-lg focus:ring-0 border-0 text-lg cursor-pointer dark:bg-gray-800">
                        {
                            [
                                <option  value="South Africa">
                                    {`${southAfrica?.flag} ${southAfrica?.dial_code}`}
                                </option>,
                                ...countries
                                    .filter((country: { name: string; }) => country.name !== "South Africa")
                                    .map((country: { name: string | number | string[] | null | undefined; flag: any; dial_code: any; }) => (
                                        <option  value={country.name}>
                                            {`${country.flag} ${country.dial_code}`}
                                        </option>
                                    ))
                            ]
                        }
                    </select>
                    </div>
                </div>

                <div class="mt-10">
                    <div class="flex flex-col gap-2  border-b dark:border-gray-700 pb-8">
                        <div class="font-bold text-lg">
                            Email
                        </div>
                        <div class="text-gray-500">
                            {activeUser?.email}
                        </div>
                    </div>
                    <div class="font-bold text-lg mt-8">
                        Location
                    </div>
                    <div class="flex flex-col gap-2 mt-5">
                        <div class="font-bold text-regular">
                            Country
                        </div>
                        <div class="text-gray-500">
                           {user?.country}
                        </div>
                    </div>
                    <div class="flex flex-col gap-0 mt-5">
                        <div class="font-bold text-regular">
                            Street address
                        </div>
                        <div class="text-gray-500 text-sm mb-1">
                           Only you can see this information.
                        </div>
                        <Input type="text" id="street" name="street" value={ user?.street && user?.street } />
                    </div>
                    <div class="flex flex-col gap-0 mt-3">
                        <div class="font-bold text-regular">
                            City, State
                        </div>
                        <Input type="text" id="city" name="city" value={ user?.city && user?.city } />
                    </div>
                    <div class="flex flex-col gap-0 mt-3">
                        <div class="font-bold text-regular">
                            Postal code
                        </div>
                        <Input type="text" id="postalCode" name="postalCode" value={ user?.postalCode && user?.postalCode } />
                    </div>

                    <div class="font-bold text-lg mt-8">
                        Relocate
                    </div>
                    
                    <div class="flex mt-3">
                        <input type="checkbox" name="relocate" id="relocate" class="shrink-0 mt-0.5 border-gray-200 rounded text-blue-600 p-2 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-gray-800 dark:border-gray-700 dark:checked:bg-blue-500 dark:checked:border-blue-500 dark:focus:ring-offset-gray-800 cursor-pointer" id="relocate"
                        checked={user?.relocate === true ? true : false} />
                        <label for="relocate" class="text-sm text-gray-500 ms-3 dark:text-gray-400">Willing to relocate.?</label>
                    </div>

                    <div class={`mt-3 ms-5 ${user?.relocate === true ? '' : 'hidden'}`} id="RelocateOptions">
                        <label class="text-sm text-gray-500 mb-4"><i class="fa fa-lightbulb text-orange-500" aria-hidden="true"></i>
                             Check the switch if you only want to relocate around your area</label>
                        <div class="flex flex-row gap-3 items-center mt-4">
                            <!-- Switch/Toggle -->
                            <div class="relative inline-block">
                                <input 
                                type="checkbox" 
                                id="relocate_Range" 
                                name="relocate_Range" 
                                checked={user?.relocate_Range === 'Willing to relocate anywhere' ? false : true} 
                                class="peer relative w-[3.25rem] h-7 p-px bg-gray-100 border border-gray-200 text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-blue-600 disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:text-blue-100 checked:border-blue-200 focus:checked:border-blue-200 dark:bg-gray-800 dark:border-gray-700 dark:checked:bg-blue-800/30 dark:checked:border-blue-800 dark:focus:ring-offset-gray-600 before:inline-block before:w-6 before:h-6 before:bg-white checked:before:bg-blue-600 before:translate-x-0 checked:before:translate-x-full before:rounded-full before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-gray-400 dark:checked:before:bg-blue-500"
                                />
                            
                                <label for="available" class="sr-only">switch</label>
                                <span class="peer-checked:text-blue-600 text-gray-500 w-6 h-6 absolute top-0.5 start-0.5 flex justify-center items-center pointer-events-none transition-colors ease-in-out duration-200">
                                <svg class="flex-shrink-0 w-3 h-3" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
                                </span>
                                <span class="peer-checked:text-white w-6 h-6 absolute top-0.5 end-0.5 flex justify-center items-center pointer-events-none transition-colors ease-in-out duration-200">
                                <svg class="flex-shrink-0 w-3 h-3" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"/></svg>
                                </span>
                            </div>
                            <!-- End Switch/Toggle -->
                            <div class="text-gray-500 text-sm" id="rel_location">{user?.relocate_Range}</div>
                          </div>

                          <div class={`flex-col gap-0 mt-5 ${user?.relocate_Range === 'Willing to relocate anywhere' ? false : true}`} id="locations">
                            <div class="text-gray-500 text-sm mb-1">
                               Specify locations you are willing to relocate to, (Separete each place with a comma and a space)
                            </div>
                            <Input type="text" id="places" name="places" placeholder="Example: Ulundi, Nongoma, Durban" value={user?.places}/>
                        </div>
                    </div>

                    <div class="mt-5">
                        <Button type="submit" id="Save">Update details</Button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</Layout>

<script>
const relocate = document.getElementById('relocate') as HTMLInputElement | null;
const RelocateOptions = document.getElementById('RelocateOptions') as HTMLElement | null;

const submitOrTrackFunction = (e: Event) => {
    const target = e.target as HTMLInputElement;

    if (target.checked) {
        RelocateOptions?.classList.remove('hidden');
    } else {
        RelocateOptions?.classList.add('hidden');
    }
};

relocate?.addEventListener('change', submitOrTrackFunction);
const relocate_Range = document.getElementById('relocate_Range') as HTMLInputElement | null;

if (relocate_Range) {
    relocate_Range.addEventListener('change', function() {
        const locations = document.getElementById('locations') as HTMLElement | null;
        const rel_location = document.getElementById('rel_location') as HTMLElement | null;

        if (relocate_Range.checked && locations) {
            locations.classList.remove('hidden');
            if(rel_location ) rel_location.innerHTML = 'Willing to relocate only around me'
        } else if (locations) {
            locations.classList.add('hidden');
            if(rel_location ) rel_location.innerHTML = 'Willing to relocate anywhere'
        }
    });
}
</script>